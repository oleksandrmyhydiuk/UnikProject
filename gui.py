import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import os
from datetime import datetime

import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

from models import (User, SavingsAccount, CategorizedTransaction, Budget,
                    Report, SpendingReport, IncomeReport)
from exceptions import InsufficientFundsError
from database import DatabaseManager
from api_handler import APIHandler
from services import FinanceService

class ChartSelectionDialog(tk.Toplevel):
    """–û–∫—Ä–µ–º–∏–π –∫–ª–∞—Å –¥–ª—è –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥—ñ–∞–≥—Ä–∞–º–∏."""
    def __init__(self, parent):
        super().__init__(parent)
        self.title("–í–∏–±—ñ—Ä –¥—ñ–∞–≥—Ä–∞–º–∏")
        self.geometry("300x120")
        self.resizable(False, False)
        self.transient(parent)

        self.selection = None

        ttk.Label(self, text="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó:", font=("Arial", 12)).pack(pady=10)

        btn_frame = ttk.Frame(self)
        btn_frame.pack(pady=5)

        pie_btn = ttk.Button(btn_frame, text="–ö—Ä—É–≥–æ–≤–∞", command=lambda: self._select('–∫—Ä—É–≥–æ–≤–∞'))
        pie_btn.pack(side="left", padx=10)

        bar_btn = ttk.Button(btn_frame, text="–°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞", command=lambda: self._select('—Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞'))
        bar_btn.pack(side="left", padx=10)

        self.protocol("WM_DELETE_WINDOW", self._on_close)
        self.grab_set()
        self.wait_window()

    def _select(self, chart_type):
        self.selection = chart_type
        self.destroy()

    def _on_close(self):
        self.selection = None
        self.destroy()

class FinanceAppGUI:
    """
    –ö–ª–∞—Å GUI, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –¢–Ü–õ–¨–ö–ò –∑–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    """
    def __init__(self, root):
        self._root = root
        self._root.title("–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ê—Å–∏—Å—Ç–µ–Ω—Ç (Refactored)")
        self._root.geometry("1100x700")
        self._root.minsize(1000, 600)

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        self._user = User("DefaultUser")
        self._db_manager = DatabaseManager()
        self._api_handler = APIHandler()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —à–∞—Ä—É
        self._service = FinanceService(self._user, self._db_manager)

        self._create_default_account("–û—Å–Ω–æ–≤–Ω–∏–π")
        self._service.set_current_account("–û—Å–Ω–æ–≤–Ω–∏–π")

        self._setup_ui()
        self.refresh_transactions_view()

    def _create_default_account(self, name):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."""
        transactions, balance = self._db_manager.load_transactions_for_account(name)
        account = SavingsAccount(name, initial_balance=balance)
        account.transactions = transactions
        self._user.add_account(account)
        self.current_account_name = name

    def _setup_ui(self):
        """–°—Ç–≤–æ—Ä—é—î —Ç–∞ —Ä–æ–∑–º—ñ—â—É—î –≤—Å—ñ –≤—ñ–¥–∂–µ—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É."""
        top_frame = ttk.Frame(self._root)
        top_frame.pack(fill="x", padx=10, pady=10)

        input_frame = ttk.LabelFrame(top_frame, text="–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é")
        input_frame.pack(side="left", fill="x", expand=True)

        ttk.Label(input_frame, text="–°—É–º–∞:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self._amount_entry = ttk.Entry(input_frame, width=15)
        self._amount_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(input_frame, text="–û–ø–∏—Å:").grid(row=0, column=2, padx=5, pady=5, sticky="w")
        self._desc_entry = ttk.Entry(input_frame, width=30)
        self._desc_entry.grid(row=0, column=3, padx=5, pady=5)

        ttk.Label(input_frame, text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:").grid(row=1, column=0, padx=5, pady=5, sticky="w")
        self._category_combobox = ttk.Combobox(input_frame, values=["–ü—Ä–æ–¥—É–∫—Ç–∏", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ", "–†–æ–∑–≤–∞–≥–∏", "–ó–¥–æ—Ä–æ–≤'—è", "–û–¥—è–≥", "–î–æ—Ö—ñ–¥"])
        self._category_combobox.grid(row=1, column=1, padx=5, pady=5)
        self._category_combobox.set("–ü—Ä–æ–¥—É–∫—Ç–∏")

        add_income_btn = ttk.Button(input_frame, text="‚úîÔ∏è –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥", command=self.add_income)
        add_income_btn.grid(row=0, column=4, padx=10, pady=5, sticky="ew")

        add_expense_btn = ttk.Button(input_frame, text="‚ùå –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", command=self.add_expense)
        add_expense_btn.grid(row=1, column=4, padx=10, pady=5, sticky="ew")

        converter_frame = ttk.LabelFrame(top_frame, text="üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")
        converter_frame.pack(side="left", padx=20, pady=0)

        ttk.Label(converter_frame, text="–°—É–º–∞:").grid(row=0, column=0, padx=5, pady=2)
        self._converter_amount = ttk.Entry(converter_frame, width=10)
        self._converter_amount.grid(row=0, column=1, padx=5, pady=2)

        ttk.Label(converter_frame, text="–ó:").grid(row=1, column=0, padx=5, pady=2)
        self._from_currency = ttk.Combobox(converter_frame, values=["UAH", "USD", "EUR"], width=7)
        self._from_currency.grid(row=1, column=1); self._from_currency.set("USD")

        ttk.Label(converter_frame, text="–í:").grid(row=2, column=0, padx=5, pady=2)
        self._to_currency = ttk.Combobox(converter_frame, values=["UAH", "USD", "EUR"], width=7)
        self._to_currency.grid(row=2, column=1); self._to_currency.set("UAH")

        convert_btn = ttk.Button(converter_frame, text="–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏", command=self._perform_conversion)
        convert_btn.grid(row=0, column=2, rowspan=2, padx=10, pady=5)

        self._converter_result = ttk.Label(converter_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç: 0.00", font=("Arial", 10, "bold"))
        self._converter_result.grid(row=3, column=0, columnspan=3, pady=5)

        actions_frame = ttk.LabelFrame(self._root, text="–ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤")
        actions_frame.pack(fill="x", padx=10, pady=5)

        spending_report_btn = ttk.Button(actions_frame, text="üìä –ó–≤—ñ—Ç –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏", command=lambda: self._generate_report(SpendingReport))
        spending_report_btn.pack(side="left", padx=5, pady=5)

        income_report_btn = ttk.Button(actions_frame, text="üìà –ó–≤—ñ—Ç –ø—Ä–æ –¥–æ—Ö–æ–¥–∏", command=lambda: self._generate_report(IncomeReport))
        income_report_btn.pack(side="left", padx=5, pady=5)

        chart_btn = ttk.Button(actions_frame, text="üé® –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è", command=self._show_expense_chart)
        chart_btn.pack(side="left", padx=5, pady=5)

        budget_btn = ttk.Button(actions_frame, text="üí∞ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º", command=self.manage_budget)
        budget_btn.pack(side="left", padx=5, pady=5)

        transactions_frame = ttk.LabelFrame(self._root, text="–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
        transactions_frame.pack(fill="both", expand=True, padx=10, pady=10)

        self._tree = ttk.Treeview(transactions_frame, columns=("–î–∞—Ç–∞", "–°—É–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–û–ø–∏—Å"), show="headings")
        self._tree.heading("–î–∞—Ç–∞", text="–î–∞—Ç–∞"); self._tree.column("–î–∞—Ç–∞", width=100)
        self._tree.heading("–°—É–º–∞", text="–°—É–º–∞ (–≥—Ä–Ω)"); self._tree.column("–°—É–º–∞", width=120, anchor="e")
        self._tree.heading("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"); self._tree.column("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", width=150)
        self._tree.heading("–û–ø–∏—Å", text="–û–ø–∏—Å")
        self._tree.pack(fill="both", expand=True)

        info_frame = ttk.Frame(self._root)
        info_frame.pack(fill="x", padx=10, pady=5)
        self._balance_label = ttk.Label(info_frame, text="–ë–∞–ª–∞–Ω—Å: 0.00 –≥—Ä–Ω", font=("Arial", 14, "bold"))
        self._balance_label.pack(side="left")

    def _perform_conversion(self):
        """–í–∏–∫–æ–Ω—É—î –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≤–∞–ª—é—Ç."""
        try:
            amount = float(self._converter_amount.get())
            from_cur = self._from_currency.get()
            to_cur = self._to_currency.get()
            result = self._api_handler.convert_currency(amount, from_cur, to_cur)
            if isinstance(result, float):
                self._converter_result.config(text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result:.2f} {to_cur}")
            else:
                self._converter_result.config(text="–ü–æ–º–∏–ª–∫–∞ API")
        except (ValueError, TypeError):
            self._converter_result.config(text="–ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É")

    def _generate_report(self, report_type: type[Report]):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–¥—ñ—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –∑ UI."""
        try:
            report_text, file_path = self._service.generate_report(report_type)
            messagebox.showinfo("–ó–≤—ñ—Ç", report_text)
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ó–≤—ñ—Ç —Ç–∞–∫–æ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª:\n{file_path}")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç: {e}")

    def _show_expense_chart(self):
        """–ü–æ–∫–∞–∑—É—î –¥—ñ–∞–≥—Ä–∞–º—É –≤–∏—Ç—Ä–∞—Ç –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —ó—ó —Ç–∏–ø—É."""
        dialog = ChartSelectionDialog(self._root)
        chart_type = dialog.selection

        if not chart_type:
            return

        account = self._service.get_current_account()
        start_date = datetime.now().replace(day=1).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –∑–≤—ñ—Ç—É —Ç—É—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ —Å–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä—Ç–∞—î –ª–∏—à–µ —Ç–µ–∫—Å—Ç
        spending_data = SpendingReport(account).generate(start_date, end_date)

        if not spending_data:
            messagebox.showinfo("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏.")
            return

        self._draw_chart(chart_type, spending_data)

    def _draw_chart(self, chart_type: str, data: dict):
        """–ú–∞–ª—é—î –¥—ñ–∞–≥—Ä–∞–º—É –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∏–ø—É."""
        chart_win = tk.Toplevel(self._root)
        chart_win.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6), dpi=100)
        labels = data.keys()
        sizes = data.values()

        if chart_type == '–∫—Ä—É–≥–æ–≤–∞':
            chart_win.title("–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –≤–∏—Ç—Ä–∞—Ç")
            ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
            ax.axis('equal')
        elif chart_type == '—Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞':
            chart_win.title("–°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –≤–∏—Ç—Ä–∞—Ç")
            ax.bar(labels, sizes, color='skyblue')
            ax.set_ylabel('–°—É–º–∞ (–≥—Ä–Ω)')
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()

        canvas = FigureCanvasTkAgg(fig, master=chart_win)
        canvas.draw()
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

    def add_transaction(self, is_income: bool):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–¥—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –¥–µ–ª–µ–≥—É—é—á–∏ –ª–æ–≥—ñ–∫—É —Å–µ—Ä–≤—ñ—Å—É."""
        try:
            amount = float(self._amount_entry.get())
            description = self._desc_entry.get()
            category = self._category_combobox.get()

            if not description:
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü–æ–ª–µ '–û–ø–∏—Å' –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                return

            self._service.add_transaction(amount, description, category, is_income)

            self.refresh_transactions_view()
            self._amount_entry.delete(0, tk.END)
            self._desc_entry.delete(0, tk.END)
        except InsufficientFundsError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó", e)
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É", "–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —á–∏—Å–ª–æ–º.")
        except Exception as e:
            messagebox.showerror("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞", f"–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

    def add_expense(self):
        self.add_transaction(is_income=False)

    def add_income(self):
        self.add_transaction(is_income=True)

    def refresh_transactions_view(self):
        """–û–Ω–æ–≤–ª—é—î —Ç–∞–±–ª–∏—Ü—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —Ç–∞ –±–∞–ª–∞–Ω—Å –Ω–∞ –µ–∫—Ä–∞–Ω—ñ."""
        for i in self._tree.get_children():
            self._tree.delete(i)

        account = self._service.get_current_account()
        for t in reversed(account.transactions):
            if isinstance(t, CategorizedTransaction):
                self._tree.insert("", "end", values=(t.date, f"{t.amount:.2f}", t.category, t.description))
            else:
                self._tree.insert("", "end", values=(t.date, f"{t.amount:.2f}", "", t.description))

        self._balance_label.config(text=f"–ë–∞–ª–∞–Ω—Å: {account.get_balance():.2f} –≥—Ä–Ω")

    def manage_budget(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º."""
        category = simpledialog.askstring("–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º", "–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–Ω–∞–ø—Ä., –ü—Ä–æ–¥—É–∫—Ç–∏):")
        if not category:
            return

        limit = simpledialog.askfloat("–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç–æ–º", f"–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –º—ñ—Å—è—á–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è '{category}':")
        if limit is None:
            return

        budget = Budget(category, limit)
        account = self._service.get_current_account()
        start_date = datetime.now().replace(day=1).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        transactions = account.get_transactions_by_period(start_date, end_date)
        spent = budget.get_spent_amount(transactions)

        messagebox.showinfo("–°—Ç–∞–Ω –±—é–¥–∂–µ—Ç—É", f"–ë—é–¥–∂–µ—Ç –¥–ª—è '{category}': {limit:.2f} –≥—Ä–Ω\n"
                                           f"–í–∏—Ç—Ä–∞—á–µ–Ω–æ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è: {spent:.2f} –≥—Ä–Ω")